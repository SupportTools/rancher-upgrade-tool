name: CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *" # This will run every day at midnight UTC

jobs:
  Test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Install static analysis tools
        run: |
          go install golang.org/x/lint/golint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Install dependency management tools
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install github.com/psampaz/go-mod-outdated@latest

      - name: Go static analysis
        run: |
          golint ./...
          staticcheck ./...
          go vet ./...

      - name: Dependency management
        run: |
          go mod vendor
          go mod verify
          go mod tidy

      - name: Security scanning
        run: |
          gosec ./...

  Build:
    needs: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build backend
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --pull \
            --build-arg VERSION="v${{ github.run_number }}" \
            --build-arg GIT_COMMIT="${{ github.sha }}" \
            --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')" \
            --cache-from supporttools/rancher-upgrade-tool:latest \
            -t supporttools/rancher-upgrade-tool:v${{ github.run_number }} \
            -t supporttools/rancher-upgrade-tool:latest \
            --push \
            -f Dockerfile .

  Publish:
    runs-on: ubuntu-latest
    needs:
      - Build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Helm Lint
        run: helm lint charts/rancher-upgrade-tool/

      - name: Package Helm chart
        run: |
          export CHART_VERSION="v${{ github.run_number }}"
          export APP_VERSION="v${{ github.run_number }}"
          export IMAGE_TAG="v${{ github.run_number }}"
          echo "CHART_VERSION=${CHART_VERSION}"
          echo "APP_VERSION=${APP_VERSION}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          envsubst < charts/rancher-upgrade-tool/Chart.yaml.template > charts/rancher-upgrade-tool/Chart.yaml
          envsubst < charts/rancher-upgrade-tool/values.yaml.template > charts/rancher-upgrade-tool/values.yaml
          helm package charts/rancher-upgrade-tool --destination helm/repo

      - name: Checkout helm-chart repository
        uses: actions/checkout@v4
        with:
          repository: supporttools/helm-chart
          path: helm-chart
          token: ${{ secrets.BOT_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "github-action@users.noreply.github.com"
          git config --global user.name "GitHub Action"

      - name: Update Helm repository
        run: |
          cp helm/repo/rancher-upgrade-tool-*.tgz helm-chart/
          cd helm-chart
          helm repo index . --url https://charts.support.tools/
          git add .
          git commit -m "Update Helm chart for rancher-upgrade-tool"
          git push

  Deploy:
    runs-on: ubuntu-latest
    needs: Publish
    strategy:
      max-parallel: 1
      matrix:
        environment: [mst, dev, qas, tst, stg, prd]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Setup Kubeconfig
        run: |
          if [[ "${{ matrix.environment }}" == "prd" ]]; then
            echo "${{ secrets.KUBECONFIG_PRD }}" | base64 -d > kubeconfig
          else
            echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig
          fi
          chmod 600 kubeconfig
          
          # Verify kubeconfig is valid
          if ! kubectl --kubeconfig=kubeconfig config view --minify > /dev/null 2>&1; then
            echo "Error: Invalid kubeconfig file"
            exit 1
          fi
          
          # Set KUBECONFIG environment variable
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Deploy ArgoCD Project
        run: kubectl apply -f argocd/project.yaml --validate=false

      - name: Deploy Environment - ${{ matrix.environment }}
        run: |
          ENVIRONMENT=${{ matrix.environment }}
          CHART_VERSION="v${{ github.run_number }}"

          # Check if application exists
          if kubectl -n argocd get application rancherupgrade-${ENVIRONMENT} &>/dev/null; then
            echo "ArgoCD Application 'rancherupgrade-${ENVIRONMENT}' exists. Patching targetRevision to ${CHART_VERSION}."
            kubectl -n argocd patch application "rancherupgrade-${ENVIRONMENT}" \
              --type merge \
              -p "{\"spec\":{\"source\":{\"targetRevision\":\"${CHART_VERSION}\"}}}"
          else
            echo "ArgoCD Application 'rancherupgrade-${ENVIRONMENT}' does not exist. Creating..."
            sed "s/CHARTVERSION/${CHART_VERSION}/g" argocd/${ENVIRONMENT}.yaml \
            | kubectl -n argocd apply -f - --validate=false
          fi

      - name: Wait for Deployment to Stabilize
        run: |
          MAX_TRIES=30
          SLEEP_TIME=10
          COUNTER=0
          while [ $COUNTER -lt $MAX_TRIES ]; do
            HEALTH_STATUS=$(kubectl -n argocd get applications rancherupgrade-${{ matrix.environment }} -o jsonpath='{.status.health.status}')
            echo "Current health status: $HEALTH_STATUS"
            if [ "$HEALTH_STATUS" = "Healthy" ]; then
              echo "Application is healthy."
              break
            fi
            echo "Waiting for application to become healthy..."
            sleep $SLEEP_TIME
            let COUNTER=COUNTER+1
          done
          if [ $COUNTER -eq $MAX_TRIES ]; then
            echo "Application did not become healthy in time."
            exit 1
          fi
